---
layout: post
title: "Leetcode 016"
date: 2017-12-27 18:52:33 +0900
categories: Leetcode
tag: Python
---

* content
{:toc}


3 SUM closed
=========
The origianl question is as follow.


Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.


**Example:**

```
For example, given array S = {-1 2 1 -4}, and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

```


Method
---------
Use three node moving. The time consuming is N square.






```
class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()
        s,left,right = 0,0,0
        res = nums[0] + nums[1] + nums[2]
        for i in range(len(nums)-2):
            left = i + 1
            right = len(nums)-1
            while left != right:
                s = nums[left] + nums[right] + nums[i]
                if s == target:
                    return s
                elif s > target:
                    if s-target < abs(res-target):
                        res = s
                    right -= 1
                else:
                    if target-s < abs(res-target):
                        res = s
                    left += 1
        return res
```